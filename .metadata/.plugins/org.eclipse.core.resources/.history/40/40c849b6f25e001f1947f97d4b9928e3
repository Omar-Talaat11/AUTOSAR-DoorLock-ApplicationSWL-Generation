
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif




/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Eng. Keroles Shenouda
 * @brief          : Learn-in-depth.com
 * unit 8 lesson 5 : Mastering Embedded System Online Diploma
 ******************************************************************************
//		Door Lock indication Project
 ******************************************************************************
 */
//Learn-in-depth
//Keroles Shenouda
//AUTOSAR Course (learn-in-depth.com)

#define MCU_Act_As_Master
//#define MCU_Act_As_Slave

#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>

#include "STM32F103x8.h"
#include "stm32f103x8_gpio_driver.h"
#include "lcd.h"
#include "keypad.h"
#include "stm32f103x8_EXTI_driver.h"
#include "stm32f103x8_USART_driver.h"
#include "stm32f103x8_SPI_driver.h"
#include "stm32f103x8_I2C_driver.h"
#include "I2C_Slave_EEPROM.h"




#define CYCLES_PER_LOOP 3
void wait_cycles( uint32_t n ) {
	uint32_t l = n/CYCLES_PER_LOOP;
	asm volatile( "0:" "SUBS %[count], 1;" "BNE 0b;" :[count]"+r"(l) );
}


void MCU_init () {

	//==================GPIO INIT =============================

	//Enable CLock
	RCC_GPIOA_CLK_EN();

	//PA3 ---> Door Sensor
	GPIO_PinConfig_t PinCfg_Door_Sensor ;

	PinCfg_Door_Sensor.GPIO_PinNumber = GPIO_PIN_3;
	PinCfg_Door_Sensor.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(GPIOA, &PinCfg_Door_Sensor);

	//PA7 ---> Led On/OFF

	PinCfg_Door_Sensor.GPIO_PinNumber = GPIO_PIN_7;
	PinCfg_Door_Sensor.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCfg_Door_Sensor.GPIO_Output_Speed = GPIO_SPEED_10M;
	MCAL_GPIO_Init(GPIOA, &PinCfg_Door_Sensor);
}
void StartOS ()
{
	unsigned char i = 0 ;
	//it is not memec 10ms or 12ms
	//it is just a prodic sequence fast implementation
	//as we will focus on implement OS and used accurate time based on the timer later on AUTOSAR OS unit
	//But nw we focused only on APPLICATion Layer
	while (1)
	{
		//memec RTE_Event_10ms
		if (i==10)
		{
//			ReadDoorSensor_runnable();
			i++ ;
		}else if (i==12)
		{
			//memec RTE_Event_12ms
//			DoorLock_indication_runnable();
			i=0 ;
		}else
		{
			i++ ;
		}
		wait_cycles(10);
	}

}

int main(void)
{
	MCU_init();
	StartOS();
	/* Loop forever */
	while(1)
	{

	}
}





























//
//#define LEDON  0
//#define LEDOFF 1
//
//int main(void)
//{
//
//
//	//==================GPIO INIT =============================
//
//	//Enable CLock
//	RCC_GPIOA_CLK_EN();
//
//	//PA3 ---> Door Sensor
//	GPIO_PinConfig_t PinCfg_Door_Sensor ;
//
//	PinCfg_Door_Sensor.GPIO_PinNumber = GPIO_PIN_3;
//	PinCfg_Door_Sensor.GPIO_MODE = GPIO_MODE_INPUT_FLO;
//	MCAL_GPIO_Init(GPIOA, &PinCfg_Door_Sensor);
//
//	//PA7 ---> Led On/OFF
//
//	PinCfg_Door_Sensor.GPIO_PinNumber = GPIO_PIN_7;
//	PinCfg_Door_Sensor.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
//	PinCfg_Door_Sensor.GPIO_Output_Speed = GPIO_SPEED_10M;
//	MCAL_GPIO_Init(GPIOA, &PinCfg_Door_Sensor);
//
//	/* Loop forever */
//	while(1)
//	{
//		if (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
//		{
//			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, LEDON);
//		}else
//		{
//			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, LEDOFF);
//		}
//	}
//
//}
//
//
//






//
//#if !defined(__SOFT_FP__) && defined(__ARM_FP)
//#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
//#endif
//


//
///**
// ******************************************************************************
// * @file           : main.c
// * @author         : Eng. Keroles Shenouda
// * @brief          : Learn-in-depth.com
// * unit 8 lesson 5 : Mastering Embedded System Online Diploma
// ******************************************************************************
////		Terminal1 <----> USART1 : MCU1 : (SPI1 Master) --->   (SPI2 Slave) :MCU2: USART2 ---> Terminal2
// ******************************************************************************
// */
//
//
////Learn-in-depth
////Keroles Shenouda
////Mastering_Embedded System online diploma
//
//#define MCU_Act_As_Master
////#define MCU_Act_As_Slave
//
//#include <stdint.h>
//#include <stdlib.h>
//#include <stdio.h>
//
//#include "STM32F103x8.h"
//#include "stm32f103x8_gpio_driver.h"
//#include "lcd.h"
//#include "keypad.h"
//#include "stm32f103x8_EXTI_driver.h"
//#include "stm32f103x8_USART_driver.h"
//#include "stm32f103x8_SPI_driver.h"
//#include "stm32f103x8_I2C_driver.h"
//#include "I2C_Slave_EEPROM.h"
//
//
//#define CYCLES_PER_LOOP 3
//void wait_cycles( uint32_t n ) {
//	uint32_t l = n/CYCLES_PER_LOOP;
//	asm volatile( "0:" "SUBS %[count], 1;" "BNE 0b;" :[count]"+r"(l) );
//}
//
//unsigned int IRQ_Flag = 0 ;
//unsigned char ch, ch2 , SPI_TX_empty =1;
//
//
//
//
//void SPI1_IRQ_Callback (struct S_IRQ_SRC irq_src)
//{
//
//#ifdef MCU_Act_As_Slave
//	if (irq_src.RXNE)
//	{
//		ch =0xf ;
//		MCAL_SPI_TX_RX  (SPI1, &ch,Pollingdisable);
//		MCAL_UART_SendData(USART1, &ch, enable);
//
//	}
//#endif
//
//
//}
//
//void UART_IRQ_Callback (void)
//{
//#ifdef MCU_Act_As_Master
//	MCAL_UART_ReceiveData(USART1, &ch, disable);
//	MCAL_UART_SendData(USART1, &ch, enable);
//	//Send to SPI
//	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
//	MCAL_SPI_TX_RX  (SPI1, &ch,Pollingenable);
//	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
//#endif
//
//
//}
//
//int main(void)
//{
//
//	//Enable CLock
//	RCC_GPIOA_CLK_EN();
//	RCC_GPIOB_CLK_EN();
//	RCC_AFIO_CLK_EN();
//
//
//	//==================UART INIT =============================
//	//PA9 TX
//	//PA10 RX
//	//PA11 CTS
//	//PA12 RTS
//
////	UART_Config uartCFG ;
////	uartCFG.BaudRate = UART_BaudRate_115200 ;
////	uartCFG.HwFlowCtl = UART_HwFlowCtl_NONE ;
////	uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE ;
////	uartCFG.P_IRQ_CallBack = UART_IRQ_Callback ;
////	uartCFG.Parity =UART_Parity__NONE ;
////	uartCFG.Payload_Length = UART_Payload_Length_8B;
////	uartCFG.StopBits = UART_StopBits__1 ;
////	uartCFG.USART_Mode = UART_MODE_TX_RX ;
////
////	MCAL_UART_Init(USART1, &uartCFG);
////	MCAL_UART_GPIO_Set_Pins(USART1);
//
//
//	//==================SPI INIT =============================
//	//		PA4 : SPI1_NSS
//	//		PA5 : SPI1_SCK
//	//		PA6 : SPI1_MISO
//	//		PA7 : SPI1_MOSI
////	SPI_Config SPI1CFG ;
////	SPI1CFG.CLKPhase =  SPI_Clock_Phase_2EDGE_first_data_capture_edge ;
////	SPI1CFG.CLKPolarity = SPI_CLKPolarity_HIGH_when_idle ;
////	SPI1CFG.DataSize = SPI_DataSize_8BIT ;
////	SPI1CFG.Frame_Format = SPI_Frame_Format_MSB_transmitted_first;
////	//Assume by default pclk2 = 8MHZ
////	SPI1CFG.SPI_BAUDRATEPRESCALER= SPI_BAUDRATEPRESCALER_8 ;
////
////#ifdef MCU_Act_As_Master
////	SPI1CFG.Communication_Mode = SPI_DIRECTION_2LINES ;
////	SPI1CFG.Device_Mode = SPI_Device_Mode_MASTER;
////	SPI1CFG.IRQ_Enable = SPI_IRQ_Enable_NONE;
////	SPI1CFG.NSS = SPI_NSS_Soft_NSSInternalSoft_Set ;
////	SPI1CFG.P_IRQ_CallBack = SPI1_IRQ_Callback ;
////#endif
////#ifdef MCU_Act_As_Slave
////	SPI1CFG.Communication_Mode = SPI_DIRECTION_2LINES ;
////	SPI1CFG.Device_Mode = SPI_Device_Mode_SLAVE;
////	SPI1CFG.IRQ_Enable = SPI_IRQ_Enable_RXNEIE;
////	SPI1CFG.NSS = SPI_NSS_Hard_Slave ;
////	SPI1CFG.P_IRQ_CallBack = SPI1_IRQ_Callback ;
////#endif
////
////	MCAL_SPI_Init (SPI1, &SPI1CFG);
////	MCAL_SPI_GPIO_Set_Pins (SPI1);
////
////#ifdef MCU_Act_As_Master
////
////	//Hardware master/ NSS output enabled Alternate function push-pull
////	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
////	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
////	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
////	MCAL_GPIO_Init(GPIOA, &PinCfg);
////
////
////	//Force the Slave Slect (High) idle Mode
////	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
////#endif
//
//
//	//Test Case 1
//		unsigned char  ch1 [] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7} ;
//		unsigned char  ch2 [7] = {0} ;
//
//		eeprom_init();
//		eeprom_write_Nbytes(0xAF, ch1, 7);
//		eeprom_read_byte(0xAF, ch2, 7);
//
//
//		//Test Case 2
//		ch1[0] = 0xA ;
//		ch1[1] = 0xB ;
//		ch1[2] = 0xC ;
//		ch1[3] = 0xD ;
//
//		eeprom_write_Nbytes(0xFFF, ch1, 4);
//		eeprom_read_byte(0xFFF, ch2, 4);
//
//
//	/* Loop forever */
//	while(1)
//	{
//
//	}
//
//}

